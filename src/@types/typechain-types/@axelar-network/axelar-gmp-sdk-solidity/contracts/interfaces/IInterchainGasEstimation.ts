/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type GasInfoStruct = {
  gasEstimationType: BigNumberish;
  l1FeeScalar: BigNumberish;
  axelarBaseFee: BigNumberish;
  relativeGasPrice: BigNumberish;
  relativeBlobBaseFee: BigNumberish;
  expressFee: BigNumberish;
};

export type GasInfoStructOutput = [
  gasEstimationType: bigint,
  l1FeeScalar: bigint,
  axelarBaseFee: bigint,
  relativeGasPrice: bigint,
  relativeBlobBaseFee: bigint,
  expressFee: bigint
] & {
  gasEstimationType: bigint;
  l1FeeScalar: bigint;
  axelarBaseFee: bigint;
  relativeGasPrice: bigint;
  relativeBlobBaseFee: bigint;
  expressFee: bigint;
};

export interface IInterchainGasEstimationInterface extends Interface {
  getFunction(
    nameOrSignature: "estimateGasFee" | "getGasInfo"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GasInfoUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "estimateGasFee",
    values: [string, string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getGasInfo", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "estimateGasFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGasInfo", data: BytesLike): Result;
}

export namespace GasInfoUpdatedEvent {
  export type InputTuple = [chain: string, info: GasInfoStruct];
  export type OutputTuple = [chain: string, info: GasInfoStructOutput];
  export interface OutputObject {
    chain: string;
    info: GasInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IInterchainGasEstimation extends BaseContract {
  connect(runner?: ContractRunner | null): IInterchainGasEstimation;
  waitForDeployment(): Promise<this>;

  interface: IInterchainGasEstimationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  estimateGasFee: TypedContractMethod<
    [
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      executionGasLimit: BigNumberish,
      params: BytesLike
    ],
    [bigint],
    "view"
  >;

  getGasInfo: TypedContractMethod<
    [chain: string],
    [GasInfoStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "estimateGasFee"
  ): TypedContractMethod<
    [
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      executionGasLimit: BigNumberish,
      params: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasInfo"
  ): TypedContractMethod<[chain: string], [GasInfoStructOutput], "view">;

  getEvent(
    key: "GasInfoUpdated"
  ): TypedContractEvent<
    GasInfoUpdatedEvent.InputTuple,
    GasInfoUpdatedEvent.OutputTuple,
    GasInfoUpdatedEvent.OutputObject
  >;

  filters: {
    "GasInfoUpdated(string,tuple)": TypedContractEvent<
      GasInfoUpdatedEvent.InputTuple,
      GasInfoUpdatedEvent.OutputTuple,
      GasInfoUpdatedEvent.OutputObject
    >;
    GasInfoUpdated: TypedContractEvent<
      GasInfoUpdatedEvent.InputTuple,
      GasInfoUpdatedEvent.OutputTuple,
      GasInfoUpdatedEvent.OutputObject
    >;
  };
}
