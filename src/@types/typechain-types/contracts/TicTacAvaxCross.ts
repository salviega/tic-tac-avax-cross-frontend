/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TicTacAvaxCrossInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "board"
      | "currentPlayer"
      | "execute"
      | "executeWithToken"
      | "gameCount"
      | "gameOver"
      | "gasService"
      | "gateway"
      | "getBoard"
      | "lastMoveTimestamp"
      | "lastRoundWinner"
      | "makeMove"
      | "message"
      | "players"
      | "resetGame"
      | "roundCount"
      | "startGame"
      | "winner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameDraw"
      | "GameReset"
      | "GameStarted"
      | "GameWon"
      | "MoveMade"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "board",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPlayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BytesLike, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithToken",
    values: [BytesLike, string, string, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gameCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameOver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gasService",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(functionFragment: "getBoard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastMoveTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRoundWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeMove",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "message", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetGame",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "roundCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startGame",
    values: [string, string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "board", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameOver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasService", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBoard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastMoveTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRoundWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeMove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "message", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resetGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roundCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
}

export namespace GameDrawEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameResetEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [player1: AddressLike, player2: AddressLike];
  export type OutputTuple = [player1: string, player2: string];
  export interface OutputObject {
    player1: string;
    player2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameWonEvent {
  export type InputTuple = [winner: AddressLike];
  export type OutputTuple = [winner: string];
  export interface OutputObject {
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MoveMadeEvent {
  export type InputTuple = [
    player: AddressLike,
    row: BigNumberish,
    col: BigNumberish
  ];
  export type OutputTuple = [player: string, row: bigint, col: bigint];
  export interface OutputObject {
    player: string;
    row: bigint;
    col: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TicTacAvaxCross extends BaseContract {
  connect(runner?: ContractRunner | null): TicTacAvaxCross;
  waitForDeployment(): Promise<this>;

  interface: TicTacAvaxCrossInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  board: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  currentPlayer: TypedContractMethod<[], [bigint], "view">;

  execute: TypedContractMethod<
    [
      commandId: BytesLike,
      sourceChain: string,
      sourceAddress: string,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  executeWithToken: TypedContractMethod<
    [
      commandId: BytesLike,
      sourceChain: string,
      sourceAddress: string,
      payload: BytesLike,
      tokenSymbol: string,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  gameCount: TypedContractMethod<[], [bigint], "view">;

  gameOver: TypedContractMethod<[], [boolean], "view">;

  gasService: TypedContractMethod<[], [string], "view">;

  gateway: TypedContractMethod<[], [string], "view">;

  getBoard: TypedContractMethod<
    [],
    [
      [
        [bigint, bigint, bigint],
        [bigint, bigint, bigint],
        [bigint, bigint, bigint]
      ]
    ],
    "view"
  >;

  lastMoveTimestamp: TypedContractMethod<[], [bigint], "view">;

  lastRoundWinner: TypedContractMethod<[], [string], "view">;

  makeMove: TypedContractMethod<
    [
      _destinationChain: string,
      _destinationAddress: string,
      _row: BigNumberish,
      _col: BigNumberish
    ],
    [void],
    "payable"
  >;

  message: TypedContractMethod<[], [string], "view">;

  players: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  resetGame: TypedContractMethod<
    [_destinationChain: string, _destinationAddress: string],
    [void],
    "payable"
  >;

  roundCount: TypedContractMethod<[], [bigint], "view">;

  startGame: TypedContractMethod<
    [
      _destinationChain: string,
      _destinationAddress: string,
      playerOne: AddressLike,
      playerTwo: AddressLike
    ],
    [void],
    "payable"
  >;

  winner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "board"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentPlayer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [
      commandId: BytesLike,
      sourceChain: string,
      sourceAddress: string,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeWithToken"
  ): TypedContractMethod<
    [
      commandId: BytesLike,
      sourceChain: string,
      sourceAddress: string,
      payload: BytesLike,
      tokenSymbol: string,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gameCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gameOver"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "gasService"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gateway"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBoard"
  ): TypedContractMethod<
    [],
    [
      [
        [bigint, bigint, bigint],
        [bigint, bigint, bigint],
        [bigint, bigint, bigint]
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastMoveTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastRoundWinner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "makeMove"
  ): TypedContractMethod<
    [
      _destinationChain: string,
      _destinationAddress: string,
      _row: BigNumberish,
      _col: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "message"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "resetGame"
  ): TypedContractMethod<
    [_destinationChain: string, _destinationAddress: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "roundCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "startGame"
  ): TypedContractMethod<
    [
      _destinationChain: string,
      _destinationAddress: string,
      playerOne: AddressLike,
      playerTwo: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "winner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "GameDraw"
  ): TypedContractEvent<
    GameDrawEvent.InputTuple,
    GameDrawEvent.OutputTuple,
    GameDrawEvent.OutputObject
  >;
  getEvent(
    key: "GameReset"
  ): TypedContractEvent<
    GameResetEvent.InputTuple,
    GameResetEvent.OutputTuple,
    GameResetEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "GameWon"
  ): TypedContractEvent<
    GameWonEvent.InputTuple,
    GameWonEvent.OutputTuple,
    GameWonEvent.OutputObject
  >;
  getEvent(
    key: "MoveMade"
  ): TypedContractEvent<
    MoveMadeEvent.InputTuple,
    MoveMadeEvent.OutputTuple,
    MoveMadeEvent.OutputObject
  >;

  filters: {
    "GameDraw()": TypedContractEvent<
      GameDrawEvent.InputTuple,
      GameDrawEvent.OutputTuple,
      GameDrawEvent.OutputObject
    >;
    GameDraw: TypedContractEvent<
      GameDrawEvent.InputTuple,
      GameDrawEvent.OutputTuple,
      GameDrawEvent.OutputObject
    >;

    "GameReset()": TypedContractEvent<
      GameResetEvent.InputTuple,
      GameResetEvent.OutputTuple,
      GameResetEvent.OutputObject
    >;
    GameReset: TypedContractEvent<
      GameResetEvent.InputTuple,
      GameResetEvent.OutputTuple,
      GameResetEvent.OutputObject
    >;

    "GameStarted(address,address)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "GameWon(address)": TypedContractEvent<
      GameWonEvent.InputTuple,
      GameWonEvent.OutputTuple,
      GameWonEvent.OutputObject
    >;
    GameWon: TypedContractEvent<
      GameWonEvent.InputTuple,
      GameWonEvent.OutputTuple,
      GameWonEvent.OutputObject
    >;

    "MoveMade(address,uint8,uint8)": TypedContractEvent<
      MoveMadeEvent.InputTuple,
      MoveMadeEvent.OutputTuple,
      MoveMadeEvent.OutputObject
    >;
    MoveMade: TypedContractEvent<
      MoveMadeEvent.InputTuple,
      MoveMadeEvent.OutputTuple,
      MoveMadeEvent.OutputObject
    >;
  };
}
