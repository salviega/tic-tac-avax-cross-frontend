{
  "language": "Solidity",
  "sources": {
    "contracts/TicTacAvax.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract TicTacAvax {\n\taddress[2] public players;\n\tuint public currentPlayer;\n\tuint8[3][3] public board;\n\tuint public roundCount;\n\tuint public gameCount;\n\tbool public gameOver;\n\taddress public winner;\n\tuint public lastMoveTimestamp;\n\taddress public lastRoundWinner;\n\n\tevent GameStarted(address player1, address player2);\n\tevent MoveMade(address player, uint8 row, uint8 col);\n\tevent GameWon(address winner);\n\tevent GameDraw();\n\tevent GameReset();\n\n\tmodifier onlyPlayers() {\n\t\trequire(\n\t\t\tmsg.sender == players[0] || msg.sender == players[1],\n\t\t\t'Not a player'\n\t\t);\n\t\t_;\n\t}\n\n\tmodifier validMove(uint8 row, uint8 col) {\n\t\trequire(!gameOver, 'Game over');\n\t\trequire(row < 3 && col < 3, 'Invalid move');\n\t\trequire(board[row][col] == 0, 'Cell already taken');\n\t\t_;\n\t}\n\n\tconstructor() {}\n\n\tfunction startGame(address playerOne, address playerTwo) public {\n\t\trequire(\n\t\t\tplayers[0] == address(0) && players[1] == address(0),\n\t\t\t'Game already started'\n\t\t);\n\t\trequire(\n\t\t\tplayerOne != address(0) && playerTwo != address(0),\n\t\t\t'Invalid player'\n\t\t);\n\t\trequire(playerOne != playerTwo, 'Players must be different');\n\n\t\tplayers[0] = playerOne;\n\t\tplayers[1] = playerTwo;\n\t\tcurrentPlayer = 0;\n\t\tgameOver = false;\n\t\tlastMoveTimestamp = block.timestamp;\n\t\tgameCount++;\n\n\t\temit GameStarted(playerOne, playerTwo);\n\t}\n\n\tfunction makeMove(\n\t\tuint8 row,\n\t\tuint8 col\n\t) public onlyPlayers validMove(row, col) {\n\t\trequire(msg.sender == players[currentPlayer], 'Not your turn');\n\n\t\tboard[row][col] = uint8(currentPlayer + 1);\n\t\temit MoveMade(msg.sender, row, col);\n\n\t\tif (checkWin()) {\n\t\t\tgameOver = true;\n\t\t\twinner = msg.sender;\n\t\t\tlastRoundWinner = msg.sender;\n\t\t\temit GameWon(msg.sender);\n\t\t} else if (checkDraw()) {\n\t\t\tgameOver = true;\n\t\t\temit GameDraw();\n\t\t} else {\n\t\t\tcurrentPlayer = 1 - currentPlayer;\n\t\t}\n\n\t\tlastMoveTimestamp = block.timestamp;\n\t\troundCount++;\n\t}\n\n\tfunction checkWin() internal view returns (bool) {\n\t\tfor (uint8 i = 0; i < 3; i++) {\n\t\t\tif (\n\t\t\t\t(board[i][0] == board[i][1] &&\n\t\t\t\t\tboard[i][1] == board[i][2] &&\n\t\t\t\t\tboard[i][0] != 0) ||\n\t\t\t\t(board[0][i] == board[1][i] &&\n\t\t\t\t\tboard[1][i] == board[2][i] &&\n\t\t\t\t\tboard[0][i] != 0)\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\t(board[0][0] == board[1][1] &&\n\t\t\t\tboard[1][1] == board[2][2] &&\n\t\t\t\tboard[0][0] != 0) ||\n\t\t\t(board[0][2] == board[1][1] &&\n\t\t\t\tboard[1][1] == board[2][0] &&\n\t\t\t\tboard[0][2] != 0)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction checkDraw() internal view returns (bool) {\n\t\tfor (uint8 i = 0; i < 3; i++) {\n\t\t\tfor (uint8 j = 0; j < 3; j++) {\n\t\t\t\tif (board[i][j] == 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn !checkWin();\n\t}\n\n\tfunction resetGame() public {\n\t\trequire(\n\t\t\tgameOver || block.timestamp > lastMoveTimestamp + 86400,\n\t\t\t'Game is not over yet or 24 hours have not passed'\n\t\t);\n\n\t\tfor (uint8 i = 0; i < 3; i++) {\n\t\t\tfor (uint8 j = 0; j < 3; j++) {\n\t\t\t\tboard[i][j] = 0;\n\t\t\t}\n\t\t}\n\n\t\tgameOver = false;\n\t\tcurrentPlayer = 0;\n\t\troundCount = 0;\n\t\twinner = address(0);\n\t\tlastMoveTimestamp = block.timestamp;\n\t\tplayers[0] = address(0);\n\t\tplayers[1] = address(0);\n\n\t\temit GameReset();\n\t}\n\n\tfunction getBoard() public view returns (uint8[3][3] memory) {\n\t\treturn board;\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}